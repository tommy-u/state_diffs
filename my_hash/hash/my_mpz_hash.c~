#include <stdlib.h>
#include <stdio.h>
#include "uthash.h"
#include "gmp.h"
/*
  //why does indentation break with #if directive? 
  #if 0
  typedef struct {
  char a;
  //  int b;
  } record_key_t;


  typedef struct {
  record_key_t key;
  int id;
  UT_hash_handle hh;
  } record_t;
  #endif
*/
typedef struct {
  mpz_t my_mpz;
} record_t_key;

typedef struct { 
  record_t_key key;
  int id;
  UT_hash_handle hh;
} record_t;

int main(int argc, char *argv[]) {
  record_t l, *p, *r, *tmp, *records = NULL;

  //build the record itself
  r = (record_t*)malloc( sizeof(record_t) );
  memset(r, 0, sizeof(record_t));
  //create an mpz
  mpz_t my_z;
  //  mpz_init_set_ui(my_z,4);
  mpz_init(my_z);
  mpz_set_str(my_z, "110", 2);
  mpz_init_set(r->key.my_mpz, my_z);
  //  r->key.my_mpz = my_z;

  HASH_ADD(hh, records, key, sizeof(record_t_key), r);
  
  //build a matching key to use to find the record
  memset(&l, 0, sizeof(record_t));
    //create an mpz
  mpz_t z_tmp;
  mpz_init(z_tmp);
  mpz_set_str(z_tmp, "110", 2);
  mpz_init_set(l.key.my_mpz, z_tmp);

  //  HASH_FIND(hh, records, &l.key, sizeof(record_t_key), p);
  HASH_FIND(hh, records, key, sizeof(record_t_key), r);

  if (p) 
    {
      printf("found that item\n");
    }

  printf("r->key.my_mpz \n");
  mpz_out_str(stdout,2,r->key.my_mpz);
  printf("\n");

  printf("l.key.my_mpz \n");
  mpz_out_str(stdout,2,l.key.my_mpz);
  printf("\n");

  HASH_ITER(hh, records, p, tmp) {
    HASH_DEL(records, p);
    free(p);
  }

#if 0
  mpz_t my_z;
  //  mpz_init_set_ui(my_z,4);
  mpz_init(my_z);
  mpz_out_str(stdout,2,my_z);
  printf("\n");
  mpz_set_str(my_z, "110", 2);
  
  mpz_out_str(stdout,2,my_z);
  printf("\n");
#endif
  return 0;  
}
